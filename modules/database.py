import json
import os
from datetime import datetime


DATE_FORMAT = '%Y-%m-%d'
DIR_FORMAT = '%Y/%m'
FILE_FORMAT = '%Y/%m/%d.json'


def get_vulnerabilities(date, path='data'):
    if not os.path.isfile(f'{path}/{date.strftime(FILE_FORMAT)}'):
        return None

    with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'r') as f:
        return json.load(f)


def write_vulnerabilities(vulnerabilities, path='data'):
    split_vulnerabilities = split_vulnerabilities_by_date(vulnerabilities)

    for date_str, vulnerabilities in split_vulnerabilities.items():
        date = datetime.strptime(date_str, DATE_FORMAT)

        if not os.path.isdir(f'{path}/{date.strftime(DIR_FORMAT)}'):
            os.makedirs(f'{path}/{date.strftime(DIR_FORMAT)}')

        with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'w') as f:
            json.dump(vulnerabilities, f)


def split_vulnerabilities_by_date(vulnerabilities):
    split_vulnerabilities = {}

    for vulnerability in vulnerabilities:
        date = datetime.strptime(
            vulnerability['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f')

        date_str = date.strftime(DATE_FORMAT)

        if date_str not in split_vulnerabilities:
            split_vulnerabilities[date_str] = {}

        split_vulnerabilities[date_str][vulnerability['cve']
                                        ['id']] = vulnerability['cve']

    return split_vulnerabilities


def update_vulnerabilities(new_vulnerabilities, path='data'):
    split_vulnerabilities = split_vulnerabilities_by_date(new_vulnerabilities)
    old_vulnerabilities = {}

    for date_str in split_vulnerabilities:
        old_vulnerabilities[date_str] = get_vulnerabilities(
            datetime.strptime(date_str, '%Y-%m-%d'), path)

        for new_vulnerability in split_vulnerabilities[date_str]:
            if new_vulnerability in old_vulnerabilities[date_str]:
                updated_vulnerability = split_vulnerabilities[date_str][new_vulnerability]

                if json.dumps(old_vulnerabilities[date_str][new_vulnerability], sort_keys=True) != json.dumps(updated_vulnerability, sort_keys=True):
                    if updated_vulnerability['vulnStatus'] == 'REJECTED':
                        old_vulnerabilities[date_str].pop(new_vulnerability)

                    else:
                        old_vulnerabilities[date_str][new_vulnerability] = updated_vulnerability

    return old_vulnerabilities


if __name__ == '__main__':
    import api

    vulnerabilities = api.get_cves()
