import json
import os
from datetime import datetime


DATE_FORMAT = '%Y-%m-%d'
DIR_FORMAT = '%Y/%m'
FILE_FORMAT = '%Y/%m/%d.json'


def get_vulnerabilities(date, path='data'):
    if not os.path.isfile(f'{path}/{date.strftime(FILE_FORMAT)}'):
        return None

    with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'r') as f:
        return json.load(f)


def write_vulnerabilities(vulnerabilities, path='data'):
    split_vulnerabilities = split_vulnerabilities_by_date(vulnerabilities)

    for date_str, vulnerabilities in split_vulnerabilities.items():
        date = datetime.strptime(date_str, DATE_FORMAT)

        if not os.path.isdir(f'{path}/{date.strftime(DIR_FORMAT)}'):
            os.makedirs(f'{path}/{date.strftime(DIR_FORMAT)}')

        with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'w') as f:
            json.dump(vulnerabilities, f)


def split_vulnerabilities_by_date(vulnerabilities):
    split_vulnerabilities = {}

    for vulnerability in vulnerabilities:
        date = datetime.strptime(
            vulnerability['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f')

        date_str = date.strftime(DATE_FORMAT)

        if date_str not in split_vulnerabilities:
            split_vulnerabilities[date_str] = {}

        split_vulnerabilities[date_str][vulnerability['cve']
                                        ['id']] = vulnerability['cve']

    return split_vulnerabilities


def update_vulnerabilities(new_vulnerabilities, date_str):
    old_vulnerabilities = get_vulnerabilities(
        datetime.strptime(date_str, DATE_FORMAT))

    for new_vulnerability in new_vulnerabilities[date_str]:
        if new_vulnerability in old_vulnerabilities.keys():
            if old_vulnerabilities[new_vulnerability] != new_vulnerabilities[date_str][new_vulnerability]:
                if new_vulnerabilities[date_str][new_vulnerability]['vulnStatus'] == 'REJECTED':
                    old_vulnerabilities.pop(new_vulnerability)

                else:
                    old_vulnerabilities[new_vulnerability] = new_vulnerabilities[date_str][new_vulnerability]

    return old_vulnerabilities


if __name__ == '__main__':
    import api

    vulnerabilities = api.get_cves()
