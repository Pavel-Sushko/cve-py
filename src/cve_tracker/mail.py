import base64
import smtplib
import os
from datetime import datetime
from email.message import EmailMessage


class MailClient:
    def __init__(self):
        self.smtp_server = None
        self.smtp_port = None
        self.username = None
        self.password = None
        self.from_address = None
        self.to_address = None
        self.subject = 'CVE Report for {{.Date}}'
        self.body = 'Please find attached the CVE report for {{.Date}}.'

    def __init__(self, smtp_server=None, smtp_port=None, username=None, password=None):
        self.smtp_server = smtp_server
        self.smtp_port = smtp_port
        self.username = username
        self.password = password

    def send_email(self, file):
        # Create the message
        message = EmailMessage()

        message.set_content(self.body.replace(
            '{{.Date}}', datetime.now().strftime('%Y-%m-%d')))
        message.add_attachment(open(file, 'rb').read(),
                               maintype='text', subtype='plain', filename=file)

        message['From'] = self.from_address
        message['To'] = self.to_address
        message['Subject'] = self.subject.replace(
            '{{.Date}}', datetime.now().strftime('%Y-%m-%d'))

        if self.google_service_account:
            encoded_message = base64.urlsafe_b64encode(
                message.as_bytes()).decode()

            created_message = {'raw': encoded_message}

            self.google_service_account.users().messages().send(
                userId='me', body=created_message).execute()

        else:
            # Connect to the SMTP server and send the message
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.sendmail(self.username, self.to_address,
                                message.as_string())

    def load_config_file(self, config_file):
        ext = os.path.splitext(config_file)[1]

        if ext == '.json':
            self.load_json_config_file(config_file)

        elif ext in ('.yaml', '.yml'):
            self.load_yaml_config_file(config_file)

        elif ext == '.xml':
            self.load_xml_config_file(config_file)

        elif ext == '.env':
            self.load_env_config_file(config_file)

        else:
            raise TypeError('Invalid config file type.')

    def load_json_config_file(self, config_file):
        import json

        with open(config_file, 'r') as file:
            config = json.load(file)

        self.handle_config(config)

    def load_yaml_config_file(self, config_file):
        import yaml

        with open(config_file, 'r') as file:
            config = yaml.safe_load(file)

        self.handle_config(config)

    def load_xml_config_file(self, config_file):
        import xml.etree.ElementTree as ET
        from defusedxml.ElementTree import parse

        with open(config_file, 'r') as file:
            config = parse(file).getroot()

        self.handle_config(config)

    def load_env_config_file(self, config_file):
        from dotenv import load_dotenv

        load_dotenv(config_file)

        self.smtp_server = os.getenv('SMTP_SERVER')
        self.smtp_port = os.getenv('SMTP_PORT')
        self.username = os.getenv('USERNAME')
        self.password = os.getenv('PASSWORD')

    def handle_config(self, config):
        if config['type'] == 'gmail_service_account':
            self.google_service_account = self.load_google_service_account_config(
                config)

        else:
            self.smtp_server = config['smtp_server']
            self.smtp_port = config['smtp_port']
            self.username = config['username']
            self.password = config['password']

        self.from_address = config['from']
        self.to_address = config['to']
        self.subject = config['subject']
        self.body = config['body']

    def load_google_service_account_config(self, config):
        from google.oauth2 import service_account
        from googleapiclient.discovery import build

        credentials = service_account.Credentials.from_service_account_info(
            config['gmail_credentials'], scopes=config['gmail_extras']['scopes'], subject=config['gmail_extras']['username'])

        service = build('gmail', 'v1', credentials=credentials)

        return service
