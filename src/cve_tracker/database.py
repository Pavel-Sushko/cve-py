import json
import os
from collections import defaultdict
from datetime import datetime


DATE_FORMAT = '%Y-%m-%d'
DIR_FORMAT = '%Y/%m'
FILE_FORMAT = '%Y/%m/%d.json'


def get_vulnerabilities(date, path='data') -> dict:
    """Get vulnerabilities from the database for a given date.

    Args:
        date (datetime): Date to get vulnerabilities for.
        path (str, optional): Path to the database. Defaults to 'data'.

    Returns:
        dict: Dictionary of vulnerabilities.
    """
    if not os.path.isabs(path):
        path = f'{os.getcwd()}/{path}'

    if not os.path.isfile(f'{path}/{date.strftime(FILE_FORMAT)}'):
        return defaultdict(dict)

    with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'r') as f:
        return json.load(f)


def write_vulnerabilities(vulnerabilities, path='data') -> None:
    """Write vulnerabilities to the database.

    Args:
        vulnerabilities (dict): Dictionary of vulnerabilities.
        path (str, optional): Path to the database. Defaults to 'data'.

    Returns:
        None
    """
    split_vulnerabilities = split_vulnerabilities_by_date(vulnerabilities)

    for date_str, vulnerabilities in split_vulnerabilities.items():
        date = datetime.strptime(date_str, DATE_FORMAT)

        os.makedirs(f'{path}/{date.strftime(DIR_FORMAT)}', exist_ok=True)

        with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'w') as f:
            json.dump(vulnerabilities, f)


def split_vulnerabilities_by_date(vulnerabilities) -> dict:
    """Split vulnerabilities by date.

    Args:
        vulnerabilities (dict): Dictionary of vulnerabilities.

    Returns:
        dict: Dictionary of vulnerabilities split by date.
    """
    split_vulnerabilities = defaultdict(dict)

    for vulnerability in vulnerabilities:
        if type(vulnerability) is dict:
            date_str = datetime.strptime(
                vulnerability['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f'
            ).strftime(DATE_FORMAT)

            split_vulnerabilities[date_str][vulnerability['cve']
                                            ['id']] = vulnerability['cve']
        else:
            date_str = datetime.strptime(
                vulnerabilities[vulnerability]['published'], '%Y-%m-%dT%H:%M:%S.%f'
            ).strftime(DATE_FORMAT)

            split_vulnerabilities[date_str][vulnerability] = vulnerabilities[vulnerability]

    return split_vulnerabilities


def update_vulnerabilities(new_vulnerabilities, path='data') -> dict:
    """Update vulnerabilities in the database.

    Args:
        new_vulnerabilities (dict): Dictionary of new vulnerabilities.
        path (str, optional): Path to the database. Defaults to 'data'.

    Returns:
        dict: Dictionary of updated vulnerabilities.
    """
    split_vulnerabilities = split_vulnerabilities_by_date(new_vulnerabilities)
    old_vulnerabilities = defaultdict(dict)

    for date_str in split_vulnerabilities:
        old_vulnerabilities.update(get_vulnerabilities(
            datetime.strptime(date_str, DATE_FORMAT), path))

    for vulnerability in new_vulnerabilities:
        old_vulnerabilities.update(
            {vulnerability['cve']['id']: vulnerability['cve']})

    return old_vulnerabilities


def update_database(vulnerabilities, path='data') -> None:
    """Update the database.

    Args:
        vulnerabilities (dict): Dictionary of vulnerabilities.
        path (str, optional): Path to the database. Defaults to 'data'.

    Returns:
        None
    """
    updated_vulnerabilities = update_vulnerabilities(vulnerabilities, path)
    write_vulnerabilities(updated_vulnerabilities, path)


if __name__ == '__main__':
    import api

    vulnerabilities = api.get_cves()
