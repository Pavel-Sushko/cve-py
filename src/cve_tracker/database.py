import json
import os
from collections import defaultdict
from datetime import datetime


DATE_FORMAT = '%Y-%m-%d'
DIR_FORMAT = '%Y/%m'
FILE_FORMAT = '%Y/%m/%d.json'


def get_vulnerabilities(date, path='data'):
    if not os.path.isfile(f'{path}/{date.strftime(FILE_FORMAT)}'):
        return None

    with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'r') as f:
        return json.load(f)


def write_vulnerabilities(vulnerabilities, path='data'):
    split_vulnerabilities = split_vulnerabilities_by_date(vulnerabilities)

    for date_str, vulnerabilities in split_vulnerabilities.items():
        date = datetime.strptime(date_str, DATE_FORMAT)

        try:
            os.makedirs(f'{path}/{date.strftime(DIR_FORMAT)}')
        except FileExistsError:
            pass

        with open(f'{path}/{date.strftime(FILE_FORMAT)}', 'w') as f:
            json.dump(vulnerabilities, f)


def split_vulnerabilities_by_date(vulnerabilities):
    split_vulnerabilities = defaultdict(dict)

    for vulnerability in vulnerabilities:
        date_str = datetime.strptime(
            vulnerability['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f'
        ).strftime(DATE_FORMAT)

        split_vulnerabilities[date_str][vulnerability['cve']
                                        ['id']] = vulnerability['cve']

    return split_vulnerabilities


def update_vulnerabilities(new_vulnerabilities, path='data'):
    split_vulnerabilities = split_vulnerabilities_by_date(new_vulnerabilities)
    old_vulnerabilities = {}

    def is_vulnerability_accepted(vulnerability):
        return vulnerability['vulnStatus'] != 'REJECTED'

    def is_vulnerability_updated(old_vulnerability, updated_vulnerability):
        return json.dumps(old_vulnerability, sort_keys=True) != json.dumps(updated_vulnerability, sort_keys=True)

    for date_str in split_vulnerabilities:
        old_vulnerabilities[date_str] = get_vulnerabilities(
            datetime.strptime(date_str, '%Y-%m-%d'), path)

        updated_vulnerabilities = {
            k: v for k, v in split_vulnerabilities[date_str].items() if k in old_vulnerabilities[date_str] and is_vulnerability_updated(old_vulnerabilities[date_str][k], v)
        }

        rejected_vulnerabilities = [
            k for k, v in updated_vulnerabilities.items() if not is_vulnerability_accepted(v)]

        for k in rejected_vulnerabilities:
            old_vulnerabilities[date_str].pop(k)

        old_vulnerabilities[date_str].update(updated_vulnerabilities)

    return old_vulnerabilities


if __name__ == '__main__':
    import api

    vulnerabilities = api.get_cves()
