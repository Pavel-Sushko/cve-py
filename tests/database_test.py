import glob
import copy
import cve_tracker.api as api
import cve_tracker.database as database
import distutils
import json
import os
import pytest
import shutil
from collections import defaultdict
from datetime import datetime


class Database:
    def __init__(self, template_path='tests/template_data', test_path='tests/test_data') -> None:
        self.vulnerabilities = defaultdict(dict)
        self.date = None

        def absolute_path(path):
            if os.path.isabs(path):
                return path
            else:
                return f'{os.getcwd()}/{path}'

        self.TEMPLATE_DATABASE_PATH = absolute_path(template_path)
        self.TEST_DATABASE_PATH = absolute_path(test_path)

        if not os.path.isdir(self.TEMPLATE_DATABASE_PATH):
            self.create_vulnerability_database()
        else:
            self.load_existing_database()

    def create_vulnerability_database(self) -> None:
        self.vulnerabilities = api.get_cves()
        self.write_vulnerabilities()

    def load_existing_database(self) -> None:
        with open(f'{self.TEMPLATE_DATABASE_PATH}/vulnerabilities.json', 'r') as f:
            self.vulnerabilities = json.load(f)

    def write_vulnerabilities(self) -> None:
        os.makedirs(self.TEMPLATE_DATABASE_PATH, exist_ok=True)

        with open(f'{self.TEMPLATE_DATABASE_PATH}/vulnerabilities.json', 'w') as f:
            json.dump(self.vulnerabilities, f, indent=4)


@pytest.fixture()
def first_setup():
    test_db = Database()

    yield test_db

    # Delete the test database after the tests are done
    shutil.rmtree(test_db.TEST_DATABASE_PATH, ignore_errors=True)


@pytest.fixture()
def setup_test(first_setup):
    database.write_vulnerabilities(first_setup.vulnerabilities,
                                   first_setup.TEST_DATABASE_PATH)

    return first_setup


def test_write_vulnerabilities(first_setup):
    vulnerabilities = first_setup.vulnerabilities

    database.write_vulnerabilities(
        vulnerabilities, first_setup.TEST_DATABASE_PATH)

    db_vulnerabilities = defaultdict(dict)

    for filename in glob.glob(f'{first_setup.TEST_DATABASE_PATH}/**/*.json', recursive=True):
        with open(filename, 'r') as f:
            db_vulnerabilities.update(json.load(f))

    for vulnerability in vulnerabilities:
        assert db_vulnerabilities[vulnerability['cve']['id']]
        assert db_vulnerabilities[vulnerability['cve']
                                  ['id']] == vulnerability['cve']


def test_get_vulnerabilities(setup_test):
    vulnerabilities = setup_test.vulnerabilities
    dates = set()

    for vulnerability in vulnerabilities:
        dates.add(datetime.fromisoformat(
            vulnerability['cve']['published']).date())

    db_vulnerabilities = defaultdict(dict)

    for date in dates:
        db_vulnerabilities.update(database.get_vulnerabilities(
            date, setup_test.TEST_DATABASE_PATH))

    for vulnerability in vulnerabilities:
        assert db_vulnerabilities[vulnerability['cve']['id']]
        assert db_vulnerabilities[vulnerability['cve']
                                  ['id']] == vulnerability['cve']


def test_update_vulnerabilities(setup_test):
    vulnerabilities = setup_test.vulnerabilities
    vulnerabilities_copy = copy.deepcopy(vulnerabilities)

    for vulnerability in vulnerabilities:
        vulnerability['cve']['vulnStatus'] = 'TESTING'

    database.write_vulnerabilities(
        vulnerabilities, setup_test.TEST_DATABASE_PATH)

    updated_cves = database.update_vulnerabilities(
        vulnerabilities_copy, setup_test.TEST_DATABASE_PATH)

    for vulnerability in vulnerabilities_copy:
        assert vulnerability['cve'] == updated_cves[vulnerability['cve']['id']]


def test_update_database(setup_test):
    vulnerabilities = setup_test.vulnerabilities

    for cve in vulnerabilities:
        cve['cve']['vulnStatus'] = 'TESTING'

    database.update_database(vulnerabilities, setup_test.TEST_DATABASE_PATH)

    updated_vulnerabilities = defaultdict(dict)

    for date in database.split_vulnerabilities_by_date(
            vulnerabilities).keys():
        updated_vulnerabilities.update(
            database.get_vulnerabilities(datetime.strptime(date, '%Y-%m-%d'), setup_test.TEST_DATABASE_PATH))

    for vulnerability in vulnerabilities:
        assert updated_vulnerabilities[vulnerability['cve']['id']]
        assert updated_vulnerabilities[vulnerability['cve']
                                       ['id']] == vulnerability['cve']


def test_split_vulnerabilities_by_date(setup_test):
    vulnerabilities = setup_test.vulnerabilities
    vulnerabilities_by_date = database.split_vulnerabilities_by_date(
        vulnerabilities)

    dates = set()

    for vulnerability in vulnerabilities:
        dates.add(datetime.fromisoformat(
            vulnerability['cve']['published']).date())

    assert len(vulnerabilities_by_date.keys()) == len(dates)

    for date in dates:
        assert datetime.strftime(
            date, '%Y-%m-%d') in vulnerabilities_by_date.keys()


if __name__ == '__main__':
    pytest.main()
