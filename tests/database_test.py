import copy
import modules.api as api
import json
import os
import unittest
import sys
import inspect
from datetime import datetime

currentdir = os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)


class TestDatabase(unittest.TestCase):
    vulnerabilities = {}
    date = datetime.now()

    @classmethod
    def setUpClass(cls):
        for vulnerability in api.get_cves():
            cls.vulnerabilities[vulnerability['cve']
                                ['id']] = vulnerability['cve']

    @classmethod
    def tearDownClass(cls):
        os.remove(
            f'test_data/{cls.date.strftime("%Y/%m/%d.json")}')
        os.removedirs(f'test_data/{cls.date.strftime("%Y/%m")}')

    def setUp(self):
        # Grab the first date in the list of vulnerabilities
        self.date = datetime.strptime(
            self.vulnerabilities[next(iter(self.vulnerabilities))]['published'], '%Y-%m-%dT%H:%M:%S.%f')

        if not os.path.isdir(f'test_data/{self.date.strftime("%Y/%m")}'):
            os.makedirs(f'test_data/{self.date.strftime("%Y/%m")}')

        with open(f'test_data/{self.date.strftime("%Y/%m/%d.json")}', 'w') as f:
            f.write(json.dumps(self.vulnerabilities))

    def tearDown(self):
        with open(f'test_data/{self.date.strftime("%Y/%m/%d.json")}', 'w') as f:
            f.write(json.dumps({}))

    def test_get_vulnerabilities(self):
        from modules.database import get_vulnerabilities

        for vulnerability in self.vulnerabilities:
            date = datetime.strptime(
                self.vulnerabilities[vulnerability]['published'], '%Y-%m-%dT%H:%M:%S.%f')

            if date == self.date:
                self.assertEqual(self.vulnerabilities[vulnerability], get_vulnerabilities(
                    self.date, 'test_data')[vulnerability])

    def test_write_vulnerabilities(self):
        from modules.api import get_cves
        from modules.database import write_vulnerabilities, get_vulnerabilities

        cves = get_cves()

        write_vulnerabilities(cves, 'test_data')

        for cve in cves:
            self.assertEqual(
                cve['cve'], self.vulnerabilities[cve['cve']['id']])

    def test_update_vulnerabilities(self):
        from modules.api import get_cves
        from modules.database import update_vulnerabilities, write_vulnerabilities

        cves = get_cves()
        cves_copy = copy.deepcopy(cves)

        for cve in cves:
            cve['cve']['vulnStatus'] = 'TESTING'

        write_vulnerabilities(cves, 'test_data')

        updated_cves = update_vulnerabilities(
            cves_copy, 'test_data')

        for cve in cves_copy:
            self.assertEqual(
                cve['cve'], updated_cves[(cve['cve']['published']).split('T')[0]][cve['cve']['id']])


if __name__ == '__main__':
    unittest.main()
