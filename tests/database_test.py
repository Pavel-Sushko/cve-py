
import modules.api as api
import json
import os
import unittest
import sys
import inspect
from datetime import datetime

currentdir = os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir)


class TestDatabase(unittest.TestCase):
    vulnerabilities = api.get_cves()
    date = datetime.now()

    @classmethod
    def setUp(cls):
        # Grab the first date in the list of vulnerabilities
        cls.date = datetime.strptime(
            cls.vulnerabilities[0]['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f')

        formatted_vulnerabilities = {}

        for vulnerability in cls.vulnerabilities:
            formatted_vulnerabilities[vulnerability['cve']
                                      ['id']] = vulnerability['cve']

        if not os.path.isdir(f'test_data/{cls.date.year}/{cls.date.month}'):
            os.makedirs(f'test_data/{cls.date.year}/{cls.date.month}')

        with open(f'test_data/{cls.date.year}/{cls.date.month}/{cls.date.day}.json', 'w') as f:
            f.write(json.dumps(formatted_vulnerabilities))

    @classmethod
    def tearDownClass(cls):
        os.remove(
            f'test_data/{cls.date.year}/{cls.date.month}/{cls.date.day}.json')
        os.removedirs(f'test_data/{cls.date.year}/{cls.date.month}')

    def tearDown(self):
        with open(f'test_data/{self.date.year}/{self.date.month}/{self.date.day}.json', 'w') as f:
            f.write(json.dumps({}))

    def test_get_vulnerabilities(self):
        from modules.database import get_vulnerabilities

        for vulnerability in self.vulnerabilities:
            date = datetime.strptime(
                vulnerability['cve']['published'], '%Y-%m-%dT%H:%M:%S.%f')

            if date == self.date:
                self.assertEqual(vulnerability['cve'], get_vulnerabilities(
                    self.date, 'test_data')[vulnerability['cve']['id']])

    def test_write_vulnerabilities(self):
        from modules.database import write_vulnerabilities

        write_vulnerabilities(self.vulnerabilities, 'test_data')

        with open(f'test_data/{self.date.year}/{self.date.month}/{self.date.day}.json', 'r') as f:
            self.assertEqual(json.load(f), self.vulnerabilities)


if __name__ == '__main__':
    unittest.main()
