import copy
import distutils
import json
import os
import pytest
import shutil
from cve_tracker.api import get_cves
from cve_tracker.database import get_vulnerabilities, write_vulnerabilities, update_vulnerabilities
from datetime import datetime


class Database:
    def __init__(self, template_path='tests/template_data', test_path='tests/test_data') -> None:
        self.vulnerabilities = {}
        self.date = None

        def absolute_path(path):
            if os.path.isabs(path):
                return path
            else:
                return f'{os.getcwd()}/{path}'

        self.TEMPLATE_DATABASE_PATH = absolute_path(template_path)
        self.TEST_DATABASE_PATH = absolute_path(test_path)

        if not os.path.isdir(self.TEMPLATE_DATABASE_PATH):
            self.create_vulnerability_database()
        else:
            self.load_existing_database()

    def create_vulnerability_database(self) -> None:
        for vulnerability in get_cves():
            self.vulnerabilities[vulnerability['cve']
                                 ['id']] = vulnerability['cve']

        self.write_vulnerabilities()

    def load_existing_database(self) -> None:
        for root, dirs, files in os.walk(self.TEMPLATE_DATABASE_PATH):
            for file in files:
                if file.endswith('.json'):
                    with open(os.path.join(root, file), 'r') as f:
                        self.vulnerabilities.update(json.load(f))

    def write_vulnerabilities(self) -> None:
        for vulnerability in self.vulnerabilities:
            date = datetime.strptime(
                self.vulnerabilities[vulnerability]['published'], '%Y-%m-%dT%H:%M:%S.%f')

            if not os.path.isdir(f'{self.TEMPLATE_DATABASE_PATH}/{date.strftime("%Y/%m")}'):
                os.makedirs(
                    f'{self.TEMPLATE_DATABASE_PATH}/{date.strftime("%Y/%m")}')

            with open(f'{self.TEMPLATE_DATABASE_PATH}/{date.strftime("%Y/%m/%d.json")}', 'w') as f:
                f.write(json.dumps(self.vulnerabilities, indent=4))


@pytest.fixture()
def setup() -> Database:
    return Database()


@pytest.fixture(autouse=True)
def setup_test_database(setup):
    # Copy template database to test_data
    distutils.dir_util.copy_tree(
        setup.TEMPLATE_DATABASE_PATH, setup.TEST_DATABASE_PATH)

    yield Database(template_path=setup.TEST_DATABASE_PATH)

    shutil.rmtree(setup.TEST_DATABASE_PATH)


def test_get_vulnerabilities(setup_test_database):
    vulnerabilities = setup_test_database.vulnerabilities
    dates = set()

    for key, value in vulnerabilities.items():
        dates.add(datetime.fromisoformat(value['published']).date())

    db_vulnerabilities = {}

    for date in dates:
        db_vulnerabilities = get_vulnerabilities(
            date, setup_test_database.TEST_DATABASE_PATH)

    for vulnerability in vulnerabilities:
        # Check if the vulnerability exists
        assert db_vulnerabilities[vulnerability]
        # Check if the vulnerability details are the same
        assert vulnerabilities[vulnerability] == db_vulnerabilities[vulnerability]


def test_write_vulnerabilities(setup_test_database):
    cves = get_cves()

    write_vulnerabilities(cves, setup_test_database.TEST_DATABASE_PATH)

    for cve in cves:
        assert cve['cve'] == setup_test_database.vulnerabilities[cve['cve']['id']]


def test_update_vulnerabilities(setup_test_database):
    cves = get_cves()
    cves_copy = copy.deepcopy(cves)

    for cve in cves:
        cve['cve']['vulnStatus'] = 'TESTING'

    write_vulnerabilities(cves, setup_test_database.TEST_DATABASE_PATH)

    updated_cves = update_vulnerabilities(
        cves_copy, setup_test_database.TEST_DATABASE_PATH)

    for cve in cves_copy:
        assert cve['cve'] == updated_cves[(cve['cve']['published']).split('T')[
            0]][cve['cve']['id']]


if __name__ == '__main__':
    pytest.main()
